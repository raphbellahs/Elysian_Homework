name: Deploy Registration System to Azure

on:
  push:
    branches:
      - main
    paths:
      - 'registration-system/server/**'
  workflow_dispatch:  # Allow manual trigger

# Define environment variables used across jobs
env:
  PYTHON_VERSION: '3.9'
  APP_NAME: 'elysian-signup-server'
  RESOURCE_GROUP: 'elysian-group'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'  # Enable pip caching

      - name: Install dependencies
        working-directory: registration-system/server
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest  # Ensure pytest is installed

      - name: Run local tests
        working-directory: registration-system/server
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          MESSAGE_SERVICE_URL: ${{ secrets.MESSAGE_SERVICE_URL }}
          USE_LIVE_SERVER: "false"
        run: |
          python -m pytest tests/ -v
        continue-on-error: false  # Fail the workflow if tests fail

      - name: Create deployment package
        working-directory: registration-system/server
        run: |
          zip -r ../../release.zip ./*
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: release.zip
          retention-days: 1  # Only keep for 1 day to save storage

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    permissions:
      id-token: write
      contents: read

    outputs:
      webapp-url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: python-app
          
      - name: Unzip deployment package
        run: |
          unzip release.zip
          rm release.zip  # Clean up after unzipping

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.APP_NAME }}
          slot-name: 'Production'
          startup-command: 'pip install -r requirements.txt && python app.py'

      - name: Configure App Settings
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az webapp config appsettings set \
              --name ${{ env.APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --settings \
                MONGODB_URI="${{ secrets.MONGODB_URI }}" \
                JWT_SECRET="${{ secrets.JWT_SECRET }}" \
                MESSAGE_SERVICE_URL="${{ secrets.MESSAGE_SERVICE_URL }}"

  test-deployment:
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        working-directory: registration-system/server
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run deployment tests
        working-directory: registration-system/server
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          MESSAGE_SERVICE_URL: ${{ secrets.MESSAGE_SERVICE_URL }}
          USE_LIVE_SERVER: "true"
          API_URL: ${{ needs.deploy.outputs.webapp-url }}
        run: |
          echo "Testing deployment at: $API_URL"
          python -m pytest tests/ -v
        timeout-minutes: 5  # Set a timeout for the tests

  notify:
    runs-on: ubuntu-latest
    needs: [deploy, test-deployment]
    if: always()  # Run even if previous jobs fail
    
    steps:
      - name: Check deployment status
        if: needs.deploy.result == 'success' && needs.test-deployment.result == 'success'
        run: |
          echo "✅ Deployment and testing completed successfully"
          # Add notification logic here (e.g., Slack, Email)
          
      - name: Check for failures
        if: needs.deploy.result != 'success' || needs.test-deployment.result != 'success'
        run: |
          echo "❌ Deployment or testing failed"
          # Add failure notification logic here
          exit 1  # Fail the workflow to make it visible in GitHub
